"msg": {
    "api_found": true,
    "attempts": 1,
    "changed": false,
    "failed": false,
    "resources": [
        {
            "apiVersion": "v1",
            "kind": "Pod",
            "metadata": {
                "annotations": {
                    "checksum/config": "0eeb6741bb7d0c638edeb8c5884679e13e8b821a2b285f9c3d7a43b807e0c9e5"
                },
                "creationTimestamp": "2022-07-11T05:14:44Z",
                "generateName": "orderer1-",
                "labels": {
                    "app": "orderer1",
                    "app.kubernetes.io/instance": "supplychain-orderer1",
                    "app.kubernetes.io/name": "orderer1",
                    "controller-revision-hash": "orderer1-6f6ddf775f",
                    "helm.sh/chart": "orderernode-0.2.0",
                    "statefulset.kubernetes.io/pod-name": "orderer1-0"
                },
                "managedFields": [
                    {
                        "apiVersion": "v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:metadata": {
                                "f:annotations": {
                                    ".": {},
                                    "f:checksum/config": {}
                                },
                                "f:generateName": {},
                                "f:labels": {
                                    ".": {},
                                    "f:app": {},
                                    "f:app.kubernetes.io/instance": {},
                                    "f:app.kubernetes.io/name": {},
                                    "f:controller-revision-hash": {},
                                    "f:helm.sh/chart": {},
                                    "f:statefulset.kubernetes.io/pod-name": {}
                                },
                                "f:ownerReferences": {
                                    ".": {},
                                    "k:{\"uid\":\"bd4c08a2-040b-4822-83c2-ae2344d28af0\"}": {
                                        ".": {},
                                        "f:apiVersion": {},
                                        "f:blockOwnerDeletion": {},
                                        "f:controller": {},
                                        "f:kind": {},
                                        "f:name": {},
                                        "f:uid": {}
                                    }
                                }
                            },
                            "f:spec": {
                                "f:containers": {
                                    "k:{\"name\":\"grpc-web\"}": {
                                        ".": {},
                                        "f:env": {
                                            ".": {},
                                            "k:{\"name\":\"BACKEND_ADDRESS\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:value": {}
                                            },
                                            "k:{\"name\":\"BACKEND_TLS\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:value": {}
                                            },
                                            "k:{\"name\":\"BACKEND_TLS_CA_FILES\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:value": {}
                                            },
                                            "k:{\"name\":\"SERVER_BIND_ADDRESS\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:value": {}
                                            },
                                            "k:{\"name\":\"SERVER_HTTP_DEBUG_PORT\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:value": {}
                                            },
                                            "k:{\"name\":\"SERVER_HTTP_MAX_READ_TIMEOUT\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:value": {}
                                            },
                                            "k:{\"name\":\"SERVER_HTTP_MAX_WRITE_TIMEOUT\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:value": {}
                                            },
                                            "k:{\"name\":\"SERVER_HTTP_TLS_PORT\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:value": {}
                                            },
                                            "k:{\"name\":\"SERVER_TLS_CERT_FILE\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:value": {}
                                            },
                                            "k:{\"name\":\"SERVER_TLS_KEY_FILE\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:value": {}
                                            },
                                            "k:{\"name\":\"USE_WEBSOCKETS\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:value": {}
                                            }
                                        },
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:name": {},
                                        "f:ports": {
                                            ".": {},
                                            "k:{\"containerPort\":7443,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:containerPort": {},
                                                "f:name": {},
                                                "f:protocol": {}
                                            }
                                        },
                                        "f:resources": {},
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/certs\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {}
                                            }
                                        }
                                    },
                                    "k:{\"name\":\"orderer1\"}": {
                                        ".": {},
                                        "f:command": {},
                                        "f:envFrom": {},
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:name": {},
                                        "f:ports": {
                                            ".": {},
                                            "k:{\"containerPort\":7050,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:containerPort": {},
                                                "f:protocol": {}
                                            },
                                            "k:{\"containerPort\":9443,\"protocol\":\"TCP\"}": {
                                                ".": {},
                                                "f:containerPort": {},
                                                "f:name": {},
                                                "f:protocol": {}
                                            }
                                        },
                                        "f:resources": {
                                            ".": {},
                                            "f:limits": {
                                                ".": {},
                                                "f:cpu": {},
                                                "f:memory": {}
                                            },
                                            "f:requests": {
                                                ".": {},
                                                "f:cpu": {},
                                                "f:memory": {}
                                            }
                                        },
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/var/hyperledger/orderer/crypto\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/var/hyperledger/orderer/genesis\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {},
                                                "f:readOnly": {}
                                            },
                                            "k:{\"mountPath\":\"/var/hyperledger/production/orderer\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {}
                                            }
                                        },
                                        "f:workingDir": {}
                                    }
                                },
                                "f:dnsPolicy": {},
                                "f:enableServiceLinks": {},
                                "f:hostname": {},
                                "f:imagePullSecrets": {
                                    ".": {},
                                    "k:{\"name\":\"regcred\"}": {
                                        ".": {},
                                        "f:name": {}
                                    }
                                },
                                "f:initContainers": {
                                    ".": {},
                                    "k:{\"name\":\"certificates-init\"}": {
                                        ".": {},
                                        "f:args": {},
                                        "f:command": {},
                                        "f:env": {
                                            ".": {},
                                            "k:{\"name\":\"KUBERNETES_AUTH_PATH\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:value": {}
                                            },
                                            "k:{\"name\":\"MOUNT_PATH\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:value": {}
                                            },
                                            "k:{\"name\":\"VAULT_ADDR\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:value": {}
                                            },
                                            "k:{\"name\":\"VAULT_APP_ROLE\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:value": {}
                                            },
                                            "k:{\"name\":\"VAULT_SECRET_PREFIX\"}": {
                                                ".": {},
                                                "f:name": {},
                                                "f:value": {}
                                            }
                                        },
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:name": {},
                                        "f:resources": {},
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {},
                                        "f:volumeMounts": {
                                            ".": {},
                                            "k:{\"mountPath\":\"/secret\"}": {
                                                ".": {},
                                                "f:mountPath": {},
                                                "f:name": {}
                                            }
                                        }
                                    },
                                    "k:{\"name\":\"kafka-healthcheck\"}": {
                                        ".": {},
                                        "f:args": {},
                                        "f:command": {},
                                        "f:image": {},
                                        "f:imagePullPolicy": {},
                                        "f:name": {},
                                        "f:resources": {},
                                        "f:terminationMessagePath": {},
                                        "f:terminationMessagePolicy": {}
                                    }
                                },
                                "f:restartPolicy": {},
                                "f:schedulerName": {},
                                "f:securityContext": {},
                                "f:serviceAccount": {},
                                "f:serviceAccountName": {},
                                "f:subdomain": {},
                                "f:terminationGracePeriodSeconds": {},
                                "f:volumes": {
                                    ".": {},
                                    "k:{\"name\":\"certificates\"}": {
                                        ".": {},
                                        "f:emptyDir": {
                                            ".": {},
                                            "f:medium": {}
                                        },
                                        "f:name": {}
                                    },
                                    "k:{\"name\":\"datadir\"}": {
                                        ".": {},
                                        "f:name": {},
                                        "f:persistentVolumeClaim": {
                                            ".": {},
                                            "f:claimName": {}
                                        }
                                    },
                                    "k:{\"name\":\"orderer1-genesis-volume\"}": {
                                        ".": {},
                                        "f:configMap": {
                                            ".": {},
                                            "f:defaultMode": {},
                                            "f:items": {},
                                            "f:name": {}
                                        },
                                        "f:name": {}
                                    }
                                }
                            }
                        },
                        "manager": "kube-controller-manager",
                        "operation": "Update",
                        "time": "2022-07-11T05:14:44Z"
                    },
                    {
                        "apiVersion": "v1",
                        "fieldsType": "FieldsV1",
                        "fieldsV1": {
                            "f:status": {
                                "f:conditions": {
                                    "k:{\"type\":\"ContainersReady\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Initialized\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:status": {},
                                        "f:type": {}
                                    },
                                    "k:{\"type\":\"Ready\"}": {
                                        ".": {},
                                        "f:lastProbeTime": {},
                                        "f:lastTransitionTime": {},
                                        "f:message": {},
                                        "f:reason": {},
                                        "f:status": {},
                                        "f:type": {}
                                    }
                                },
                                "f:containerStatuses": {},
                                "f:hostIP": {},
                                "f:initContainerStatuses": {},
                                "f:phase": {},
                                "f:podIP": {},
                                "f:podIPs": {
                                    ".": {},
                                    "k:{\"ip\":\"172.17.0.12\"}": {
                                        ".": {},
                                        "f:ip": {}
                                    }
                                },
                                "f:startTime": {}
                            }
                        },
                        "manager": "kubelet",
                        "operation": "Update",
                        "time": "2022-07-11T05:15:32Z"
                    }
                ],
                "name": "orderer1-0",
                "namespace": "supplychain-net",
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "blockOwnerDeletion": true,
                        "controller": true,
                        "kind": "StatefulSet",
                        "name": "orderer1",
                        "uid": "bd4c08a2-040b-4822-83c2-ae2344d28af0"
                    }
                ],
                "resourceVersion": "13561",
                "selfLink": "/api/v1/namespaces/supplychain-net/pods/orderer1-0",
                "uid": "f324374a-8d8e-4d1d-aaec-569f26de84ed"
            },
            "spec": {
                "containers": [
                    {
                        "command": [
                            "sh",
                            "-c",
                            "cat /var/hyperledger/orderer/genesis/genesis.block.base64 | base64 -d > /var/hyperledger/orderer/orderer.genesis.block && orderer"
                        ],
                        "envFrom": [
                            {
                                "configMapRef": {
                                    "name": "orderer1-config"
                                }
                            }
                        ],
                        "image": "hyperledger/fabric-orderer:1.4.8",
                        "imagePullPolicy": "IfNotPresent",
                        "name": "orderer1",
                        "ports": [
                            {
                                "containerPort": 7050,
                                "protocol": "TCP"
                            },
                            {
                                "containerPort": 9443,
                                "name": "operations",
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "1",
                                "memory": "512M"
                            },
                            "requests": {
                                "cpu": "500m",
                                "memory": "512M"
                            }
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "volumeMounts": [
                            {
                                "mountPath": "/var/hyperledger/production/orderer",
                                "name": "datadir"
                            },
                            {
                                "mountPath": "/var/hyperledger/orderer/genesis",
                                "name": "orderer1-genesis-volume",
                                "readOnly": true
                            },
                            {
                                "mountPath": "/var/hyperledger/orderer/crypto",
                                "name": "certificates",
                                "readOnly": true
                            },
                            {
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                                "name": "vault-auth-token-bjbb2",
                                "readOnly": true
                            }
                        ],
                        "workingDir": "/opt/gopath/src/github.com/hyperledger/fabric"
                    },
                    {
                        "env": [
                            {
                                "name": "BACKEND_ADDRESS",
                                "value": "orderer1.supplychain-net:7050"
                            },
                            {
                                "name": "SERVER_TLS_CERT_FILE",
                                "value": "/certs/tls/server.crt"
                            },
                            {
                                "name": "SERVER_TLS_KEY_FILE",
                                "value": "/certs/tls/server.key"
                            },
                            {
                                "name": "BACKEND_TLS_CA_FILES",
                                "value": "/certs/tls/ca.crt"
                            },
                            {
                                "name": "SERVER_BIND_ADDRESS",
                                "value": "0.0.0.0"
                            },
                            {
                                "name": "SERVER_HTTP_DEBUG_PORT",
                                "value": "8080"
                            },
                            {
                                "name": "SERVER_HTTP_TLS_PORT",
                                "value": "7443"
                            },
                            {
                                "name": "BACKEND_TLS",
                                "value": "true"
                            },
                            {
                                "name": "SERVER_HTTP_MAX_WRITE_TIMEOUT",
                                "value": "5m"
                            },
                            {
                                "name": "SERVER_HTTP_MAX_READ_TIMEOUT",
                                "value": "5m"
                            },
                            {
                                "name": "USE_WEBSOCKETS",
                                "value": "true"
                            }
                        ],
                        "image": "ghcr.io/hyperledger-labs/grpc-web:latest",
                        "imagePullPolicy": "IfNotPresent",
                        "name": "grpc-web",
                        "ports": [
                            {
                                "containerPort": 7443,
                                "name": "grpc-web",
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {},
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "volumeMounts": [
                            {
                                "mountPath": "/certs",
                                "name": "certificates"
                            },
                            {
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                                "name": "vault-auth-token-bjbb2",
                                "readOnly": true
                            }
                        ]
                    }
                ],
                "dnsPolicy": "ClusterFirst",
                "enableServiceLinks": true,
                "hostname": "orderer1-0",
                "imagePullSecrets": [
                    {
                        "name": "regcred"
                    }
                ],
                "initContainers": [
                    {
                        "args": [
                            "#!/usr/bin/env sh\nif [ raft == kafka ]\nthen\nCOUNTER=1\nFLAG=true\nKAFKACOUNT=0\nCOUNT=0\n\nwhile [ \"$COUNTER\" -le  ]\ndo\n   \n   if [ \"$FLAG\" == false ]\n   then\n      echo \"$KAFKACOUNT kafka brokers out of $COUNT are up and running!\"\n      echo \"Retry attempted $COUNTER times, retrying after  seconds\"\n      COUNTER=`expr \"$COUNTER\" + 1`\n      sleep \n\n   else\n      echo \"SUCCESS!\"\n      echo \"All $KAFKACOUNT kafka broker are up and running!\"\n      exit 0\n      break\n   fi\ndone\nif [ \"$COUNTER\" -gt  ] || [ \"$FLAG\" == false ]\nthen\n   echo \"Retry attempted $COUNTER times, no kafka brokers are up and running. Giving up!\"\n   exit 1\n   break\n\nfi\nfi"
                        ],
                        "command": [
                            "sh",
                            "-c"
                        ],
                        "image": "busybox",
                        "imagePullPolicy": "IfNotPresent",
                        "name": "kafka-healthcheck",
                        "resources": {},
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "volumeMounts": [
                            {
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                                "name": "vault-auth-token-bjbb2",
                                "readOnly": true
                            }
                        ]
                    },
                    {
                        "args": [
                            "#!/usr/bin/env sh\nvalidateVaultResponse () {\n  if echo ${2} | grep \"errors\"; then\n    echo \"ERROR: unable to retrieve ${1}: ${2}\"\n    exit 1\n  fi\n  if  [ \"$3\" == \"LOOKUPSECRETRESPONSE\" ]\n  then\n    http_code=$(curl -sS -o /dev/null -w \"%{http_code}\" \\\n    --header \"X-Vault-Token: ${VAULT_CLIENT_TOKEN}\" \\\n    ${VAULT_ADDR}/v1/${vault_secret_key})\n    curl_response=$?\n    if test \"$http_code\" != \"200\" ; then\n        echo \"Http response code from Vault - $http_code\"\n        if test \"$curl_response\" != \"0\"; then\n           echo \"Error: curl command failed with error code - $curl_response\"\n           exit 1\n        fi\n    fi\n  fi\n}\n\nKUBE_SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\n\necho \"Getting secrets from Vault Server: ${VAULT_ADDR}\"\n# Login to Vault and so I can get an approle token\nVAULT_CLIENT_TOKEN=$(curl -sS --request POST ${VAULT_ADDR}/v1/auth/${KUBERNETES_AUTH_PATH}/login \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"role\":\"'\"${VAULT_APP_ROLE}\"'\",\"jwt\":\"'\"${KUBE_SA_TOKEN}\"'\"}' | \\\n  jq -r 'if .errors then . else .auth.client_token end')\n\nvalidateVaultResponse 'vault login token' \"${VAULT_CLIENT_TOKEN}\"\n\nvault_secret_key=\"${VAULT_SECRET_PREFIX}/tls\"\necho \"Getting TLS certificates from Vault using key $vault_secret_key\"\n\nOUTPUT_PATH=\"${MOUNT_PATH}/tls\"\nLOOKUP_SECRET_RESPONSE=$(curl -sS --header \"X-Vault-Token: ${VAULT_CLIENT_TOKEN}\" ${VAULT_ADDR}/v1/${vault_secret_key} | jq -r 'if .errors then . else . end')\nvalidateVaultResponse \"secret (${vault_secret_key})\" \"${LOOKUP_SECRET_RESPONSE}\" \"LOOKUPSECRETRESPONSE\"\n\nTLS_CA_CERT=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[\"ca.crt\"]')\nTLS_SERVER_CERT=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[\"server.crt\"]')\nTLS_SERVER_KEY=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[\"server.key\"]')\n\nmkdir -p ${OUTPUT_PATH}\necho \"${TLS_CA_CERT}\" >> ${OUTPUT_PATH}/ca.crt\necho \"${TLS_SERVER_CERT}\" >> ${OUTPUT_PATH}/server.crt\necho \"${TLS_SERVER_KEY}\" >> ${OUTPUT_PATH}/server.key\n\nvault_secret_key=\"${VAULT_SECRET_PREFIX}/msp\"\necho \"Getting MSP certificates from Vault using key $vault_secret_key\"\n\nOUTPUT_PATH=\"${MOUNT_PATH}/msp\"\nLOOKUP_SECRET_RESPONSE=$(curl -sS --header \"X-Vault-Token: ${VAULT_CLIENT_TOKEN}\" ${VAULT_ADDR}/v1/${vault_secret_key} | jq -r 'if .errors then . else . end')\nvalidateVaultResponse \"secret (${vault_secret_key})\" \"${LOOKUP_SECRET_RESPONSE}\" \"LOOKUPSECRETRESPONSE\"\n\nADMINCERT=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[\"admincerts\"]')\nCACERTS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[\"cacerts\"]')\nKEYSTORE=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[\"keystore\"]')\nSIGNCERTS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[\"signcerts\"]')\nTLSCACERTS=$(echo ${LOOKUP_SECRET_RESPONSE} | jq -r '.data.data[\"tlscacerts\"]')\n\nmkdir -p ${OUTPUT_PATH}/admincerts\nmkdir -p ${OUTPUT_PATH}/cacerts\nmkdir -p ${OUTPUT_PATH}/keystore\nmkdir -p ${OUTPUT_PATH}/signcerts\nmkdir -p ${OUTPUT_PATH}/tlscacerts\n\necho \"${ADMINCERT}\" >> ${OUTPUT_PATH}/admincerts/admin.crt\necho \"${CACERTS}\" >> ${OUTPUT_PATH}/cacerts/ca.crt\necho \"${KEYSTORE}\" >> ${OUTPUT_PATH}/keystore/server.key\necho \"${SIGNCERTS}\" >> ${OUTPUT_PATH}/signcerts/server.crt\necho \"${TLSCACERTS}\" >> ${OUTPUT_PATH}/tlscacerts/tlsca.crt"
                        ],
                        "command": [
                            "sh",
                            "-c"
                        ],
                        "env": [
                            {
                                "name": "VAULT_ADDR",
                                "value": "http://192.168.49.1:8200"
                            },
                            {
                                "name": "VAULT_SECRET_PREFIX",
                                "value": "secretsv2/data/crypto/ordererOrganizations/supplychain-net/orderers/orderer1.supplychain-net"
                            },
                            {
                                "name": "KUBERNETES_AUTH_PATH",
                                "value": "localsupplychain-net-auth"
                            },
                            {
                                "name": "VAULT_APP_ROLE",
                                "value": "vault-role"
                            },
                            {
                                "name": "MOUNT_PATH",
                                "value": "/secret"
                            }
                        ],
                        "image": "index.docker.io/hyperledgerlabs/alpine-utils:1.0",
                        "imagePullPolicy": "IfNotPresent",
                        "name": "certificates-init",
                        "resources": {},
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "volumeMounts": [
                            {
                                "mountPath": "/secret",
                                "name": "certificates"
                            },
                            {
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                                "name": "vault-auth-token-bjbb2",
                                "readOnly": true
                            }
                        ]
                    }
                ],
                "nodeName": "minikube",
                "preemptionPolicy": "PreemptLowerPriority",
                "priority": 0,
                "restartPolicy": "Always",
                "schedulerName": "default-scheduler",
                "securityContext": {},
                "serviceAccount": "vault-auth",
                "serviceAccountName": "vault-auth",
                "subdomain": "orderer1",
                "terminationGracePeriodSeconds": 30,
                "tolerations": [
                    {
                        "effect": "NoExecute",
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "tolerationSeconds": 300
                    },
                    {
                        "effect": "NoExecute",
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "tolerationSeconds": 300
                    }
                ],
                "volumes": [
                    {
                        "name": "datadir",
                        "persistentVolumeClaim": {
                            "claimName": "datadir-orderer1-0"
                        }
                    },
                    {
                        "emptyDir": {
                            "medium": "Memory"
                        },
                        "name": "certificates"
                    },
                    {
                        "configMap": {
                            "defaultMode": 420,
                            "items": [
                                {
                                    "key": "genesis.block.base64",
                                    "path": "genesis.block.base64"
                                }
                            ],
                            "name": "genesis-block-orderer1"
                        },
                        "name": "orderer1-genesis-volume"
                    },
                    {
                        "name": "vault-auth-token-bjbb2",
                        "secret": {
                            "defaultMode": 420,
                            "secretName": "vault-auth-token-bjbb2"
                        }
                    }
                ]
            },
            "status": {
                "conditions": [
                    {
                        "lastProbeTime": null,
                        "lastTransitionTime": "2022-07-11T05:14:47Z",
                        "status": "True",
                        "type": "Initialized"
                    },
                    {
                        "lastProbeTime": null,
                        "lastTransitionTime": "2022-07-11T05:14:44Z",
                        "message": "containers with unready status: [orderer1]",
                        "reason": "ContainersNotReady",
                        "status": "False",
                        "type": "Ready"
                    },
                    {
                        "lastProbeTime": null,
                        "lastTransitionTime": "2022-07-11T05:14:44Z",
                        "message": "containers with unready status: [orderer1]",
                        "reason": "ContainersNotReady",
                        "status": "False",
                        "type": "ContainersReady"
                    },
                    {
                        "lastProbeTime": null,
                        "lastTransitionTime": "2022-07-11T05:14:44Z",
                        "status": "True",
                        "type": "PodScheduled"
                    }
                ],
                "containerStatuses": [
                    {
                        "containerID": "docker://34b9d8000e6adbba9598998419ca825fe90febad2a81c83b78d3b82a6b1e82ce",
                        "image": "ghcr.io/hyperledger-labs/grpc-web:latest",
                        "imageID": "docker-pullable://ghcr.io/hyperledger-labs/grpc-web@sha256:1d14972d0bd719c74071302f872b4b36419f8023adc974d910247119d39eb398",
                        "lastState": {},
                        "name": "grpc-web",
                        "ready": true,
                        "restartCount": 0,
                        "started": true,
                        "state": {
                            "running": {
                                "startedAt": "2022-07-11T05:14:48Z"
                            }
                        }
                    },
                    {
                        "containerID": "docker://1ff505edf21446889692390f56093c4e5c112ec35dfaa3294112d617284b5be3",
                        "image": "hyperledger/fabric-orderer:1.4.8",
                        "imageID": "docker-pullable://hyperledger/fabric-orderer@sha256:128cf1bca9368b38a401cbd06433852865fa2f1f7fecce160f43f5b5f2a293cf",
                        "lastState": {
                            "terminated": {
                                "containerID": "docker://1ff505edf21446889692390f56093c4e5c112ec35dfaa3294112d617284b5be3",
                                "exitCode": 2,
                                "finishedAt": "2022-07-11T05:15:31Z",
                                "reason": "Error",
                                "startedAt": "2022-07-11T05:15:31Z"
                            }
                        },
                        "name": "orderer1",
                        "ready": false,
                        "restartCount": 3,
                        "started": false,
                        "state": {
                            "waiting": {
                                "message": "back-off 40s restarting failed container=orderer1 pod=orderer1-0_supplychain-net(f324374a-8d8e-4d1d-aaec-569f26de84ed)",
                                "reason": "CrashLoopBackOff"
                            }
                        }
                    }
                ],
                "hostIP": "192.168.49.2",
                "initContainerStatuses": [
                    {
                        "containerID": "docker://abe6dff0ec9be1d6f18ca1ef7fb3d331cd3d69ee83626a6a83e5e503c4a39bc5",
                        "image": "busybox:latest",
                        "imageID": "docker-pullable://busybox@sha256:3614ca5eacf0a3a1bcc361c939202a974b4902b9334ff36eb29ffe9011aaad83",
                        "lastState": {},
                        "name": "kafka-healthcheck",
                        "ready": true,
                        "restartCount": 0,
                        "state": {
                            "terminated": {
                                "containerID": "docker://abe6dff0ec9be1d6f18ca1ef7fb3d331cd3d69ee83626a6a83e5e503c4a39bc5",
                                "exitCode": 0,
                                "finishedAt": "2022-07-11T05:14:45Z",
                                "reason": "Completed",
                                "startedAt": "2022-07-11T05:14:45Z"
                            }
                        }
                    },
                    {
                        "containerID": "docker://f94412b97d6e6c64ff03c63c56fb0ed147a1a01f6518afcc02e9272c1e47e8ee",
                        "image": "hyperledgerlabs/alpine-utils:1.0",
                        "imageID": "docker-pullable://hyperledgerlabs/alpine-utils@sha256:cab1d1566ddaa28e482b5eeda7426791bdf607cee41e2b752ccc566553810f74",
                        "lastState": {},
                        "name": "certificates-init",
                        "ready": true,
                        "restartCount": 0,
                        "state": {
                            "terminated": {
                                "containerID": "docker://f94412b97d6e6c64ff03c63c56fb0ed147a1a01f6518afcc02e9272c1e47e8ee",
                                "exitCode": 0,
                                "finishedAt": "2022-07-11T05:14:47Z",
                                "reason": "Completed",
                                "startedAt": "2022-07-11T05:14:47Z"
                            }
                        }
                    }
                ],
                "phase": "Running",
                "podIP": "172.17.0.12",
                "podIPs": [
                    {
                        "ip": "172.17.0.12"
                    }
                ],
                "qosClass": "Burstable",
                "startTime": "2022-07-11T05:14:44Z"
            }
        }
    ]
}